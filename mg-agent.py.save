import socket
import sys
import os
import time



def findPort(mac):
   mac = mac[9:17]
   #print mac
   helper3 = os.popen("ovs-ofctl dump-ports-desc br-int | grep "+mac).read()
   #print helper3
   helping = ""
   for i in range(1,len(helper3)):
      #print helper3[i]
      if (helper3[i]=="("):
          break
      helping = helping+helper3[i]
   #print helping
   return helping
   #return "ok"

# Create a TCP/IP socket
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)

# Bind the socket to the port
server_address = ('10.143.0.209', 33333)
print >>sys.stderr, 'starting up on %s port %s' % server_address
sock.bind(server_address)
i=0

while True:
    data, address = sock.recvfrom(4096)
    print >>sys.stderr, data
    datas = data.split(':')
    source = datas[2]
    destination = datas[1]
    j=-1
    if (datas[0]=='spawn'):
        for vnf in datas:
            j=j+1
            if (vnf!='spawn'):
                print vnf
                if (vnf=='vFW'):
                    print "nova boot --image firewall --flavor m1.small --nic net-id=dc160fbe-2cd5-41c6-8d44-c1b0f962f66b "+datas[j+1]
                    #os.system("nova boot --image firewall --flavor m1.small --nic net-id=dc160fbe-2cd5-41c6-8d44-c1b0f962f66b vfw"+str(i))
                elif (vnf=='vSG'):
                    print "nova boot vSG"
                    os.system("nova boot --image satgw4 --flavor m1.small --nic port-id=dd3d57c6-2175-448f-afea-578f0aede160 --nic port-id=0044ce1d-9d68-4ed1-8e9e-eadaf37e1fe4 "+datas[j+1])
                    time.sleep(6)
                    helper = os.popen("nova show "+datas[j+1]+" | grep vital2-net").read()
                    #print helper
                    theone = ""
                    helperarray = helper.split(" ")
                    for helperitem in helperarray:
                        if "." in helperitem:
                            theone = helperitem
                    helper2 = os.popen("neutron port-list | grep "+theone).read()
                    #print "H ip einai->"+theone
                    helperarray2 = helper2.split(" ")
                    theone2 = ""
                    #print helperarray2
                    for helperitem2 in helperarray2:
                        if "fa:16:3e" in helperitem2:
                            theone2 = helperitem2


                    ovsport = findPort(theone2)
                    print ovsport
                    #print "source:"+source
                    #print "destination:"+destination
                    os.system("ovs-ofctl add-flow br-ex priority=99,dl_type=0x800,in_port=1,nw_src="+source+",nw_dst="+destination+",actions=output:3")
                    os.system("ovs-ofctl add-flow br-int priority=108,dl_type=0x800,in_port=5,nw_src="+source+",nw_dst="+destination+",actions=mod_dl_dst:fa:16:3e:68:fc:99,mod_nw_dst:192.168.8.4,mod_dl_src:fa:16:3e:30:e0:e6,mod_nw_src:192.168.7.36,output:"+ovsport)
                elif (vnf=='vSEM'):
                    print "nova boot vSEM"
                    os.system("nova boot --image satem7 --flavor m1.small --nic port-id=7acd6f82-bf98-4f7a-9624-d6ddb95cea78 --nic port-id=e0d3af81-93eb-47bc-9938-19d15135d5a9 "+datas[j+1])
                    time.sleep(6)
                    helper = os.popen("nova show "+datas[j+1]+" | grep network").read()
                    print helper
                elif (vnf=='vST'):
                    print "nova boot vST"
                    os.system("nova boot --image satterm4 --flavor m1.small --nic port-id=b0b4fecd-f54a-4daa-bf74-7856a2c301b1 --nic port-id=d7056ddd-a29c-4881-b318-3a8be371e42c "+datas[j+1])
                    time.sleep(6)
                    helper = os.popen("nova show "+datas[j+1]+" | grep vital3-net").read()
                    #print helper
                    theone = ""
                    helperarray = helper.split(" ")
                    for helperitem in helperarray:
                        if "." in helperitem:
                            theone = helperitem
                    helper2 = os.popen("neutron port-list | grep "+theone).read()
                    #print "H ip einai->"+theone
                    helperarray2 = helper2.split(" ")
                    theone2 = ""
                    #print helperarray2
                    for helperitem2 in helperarray2:
                         if "fa:16:3e" in helperitem2:
                             theone2 = helperitem2


                    ovsport = findPort(theone2)
                    print ovsport
                    os.system("ovs-ofctl add-flow br-int priority=99,dl_type=0x800,in_port="+ovsport+",nw_src=192.168.7.36,nw_dst=192.168.8.4,actions=mod_nw_src:"+source+",mod_nw_dst:"+destination+",mod_dl_src:00:90:f5:53:80:6d,mod_dl_dst:00:0c:29:61:1c:77,output:5")
                    os.system("ovs-ofctl add-flow br-ex priority=99,dl_type=0x800,in_port=3,nw_src="+source+",nw_dst="+destination+",actions=output:1")
                elif (vnf=='vMT'):
                    print "nova boot --image vMT --flavor m1.medium --nic net-id=dc160fbe-2cd5-41c6-8d44-c1b0f962f66b "+datas[j+1]
                    os.system("nova boot --image vmt1-snap-fin --flavor m1.medium --nic net-id=dc160fbe-2cd5-41c6-8d44-c1b0f962f66b "+datas[j+1])
		    #os.system("nova show vmt"+str(i)+" | grep network")
                    helper = os.popen("nova show "+datas[j+1]+" | grep network").read()
                    print "yo"
                    theone = ""
                    helperarray = helper.split(" ")
                    for helperitem in helperarray:
                        if "." in helperitem: 
                            theone = helperitem
                    helper2 = os.popen("neutron port-list | grep "+theone).read()
                    print "H ip einai->"+theone
                    helperarray2 = helper2.split(" ")
                    theone2 = ""
                    print helperarray2
                    for helperitem2 in helperarray2:
                        if "fa:16:3e" in helperitem2:
                            theone2 = helperitem2
               
                    ovsport = findPort(theone2) 
                    print ovsport
                    time.sleep(13)
                    os.system("nova interface-attach --net-id dc160fbe-2cd5-41c6-8d44-c1b0f962f66b vmt1")
                    ovsport2 = int(ovsport) + 1
                    print str(ovsport2)


                    server_address = ('10.143.0.209', 33333)
                    sent = sock.sendto(ovsport, server_address)
                    print "ovs-ofctl add-flow br-ex priority=99,dl_type=0x800,in_port=1,nw_src=10.100.16.40,nw_dst=10.100.32.40,actions=output:3"
                    print "ovs-ofctl add-flow br-int priority=99,dl_type=0x800,in_port=5,nw_src=10.100.16.40,nw_dst=10.100.32.40,actions=output:"+ovsport
                    os.system("ovs-ofctl add-flow br-int priority=99,dl_type=0x800,in_port=5,nw_src=10.100.16.40,nw_dst=10.100.32.40,actions=output:"+ovsport)
                    os.system("ovs-ofctl add-flow br-int priority=99,dl_type=0x800,in_port="+str(ovsport2)+",nw_src=10.100.16.40,nw_dst=10.100.32.40,actions=output:5")


                else:
                    print "UNKNOWN VNF-skipping";

            i=i+1
    elif (datas[0]=="delete"):
        print "delete"
        print datas
        for i in range (3,len(datas)):
            os.system("nova delete "+datas[i])
         
        os.system("neutron port-update 0044ce1d-9d68-4ed1-8e9e-eadaf37e1fe4 --no-dns-name")
        os.system("neutron port-update 7acd6f82-bf98-4f7a-9624-d6ddb95cea78 --no-dns-name")
        os.system("neutron port-update dd3d57c6-2175-448f-afea-578f0aede160 --no-dns-name")
        os.system("neutron port-update e0d3af81-93eb-47bc-9938-19d15135d5a9 --no-dns-name")
        os.system("neutron port-update b0b4fecd-f54a-4daa-bf74-7856a2c301b1 --no-dns-name")
        os.system("neutron port-update d7056ddd-a29c-4881-b318-3a8be371e42c --no-dns-name")







        


    #os.system("nova boot --image ubuntu1404 --flavor m1.small --nic net-id=3df07a25-2cb2-475c-97cd-a29eafa07c2d vFW"+str(i))

